name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-switch:
    name: 'Nintendo Switch'
    runs-on: ubuntu-latest
    container: devkitpro/devkita64:latest
 
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Build
      run: |
        cd ./cpymo-backends/sdl2
        make -j -f Makefile.Switch
    
    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for Nintendo Switch
        path: ./cpymo-backends/sdl2/cpymo.nro

  build-3ds:
    name: 'Nintendo 3DS'
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm:latest
 
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
        
    - name: Install Makerom
      run: |
        cd ./cpymo-backends/3ds
        wget https://github.com/3DSGuy/Project_CTR/releases/download/makerom-v0.17/makerom-v0.17-ubuntu_x86_64.zip
        unzip makerom-v0.17-ubuntu_x86_64.zip -d .
        chmod +x makerom

    - name: Install FFmpeg
      run: |
        cd ./cpymo-backends/3ds
        chmod +x ./install-3ds-ffmpeg.sh
        ./install-3ds-ffmpeg.sh

    - name: Build
      run: |
        cd ./cpymo-backends/3ds
        make -j
        $DEVKITARM/bin/arm-none-eabi-strip ./build/cpymo.elf
        ./makerom -f cia -o cpymo.cia -elf ./build/cpymo.elf -rsf cpymo.rsf -exefslogo -target t -icon icon -banner banner
    
    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for Nintendo 3DS
        path: |
          ./cpymo-backends/3ds/cpymo.3dsx
          ./cpymo-backends/3ds/cpymo.cia

  build-psv:
    name: 'PSV'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    
    - name: Install VitaSDK
      run: |
        git clone https://github.com/vitasdk/vdpm.git --depth 1
        cd vdpm
        export VITASDK=~/vitasdk
        export PATH=$VITASDK/bin:$PATH
        ./bootstrap-vitasdk.sh
        ./vdpm sdl2
        ./vdpm sdl2_mixer
        ./vdpm mpg123
        ./vdpm flac
        ./vdpm libmikmod
        ./vdpm libmodplug
        ./vdpm libogg
        ./vdpm libvorbis
        cd ..

    - name: Build
      run: |
        export VITASDK=~/vitasdk
        export PATH=$VITASDK/bin:$PATH
        cd cpymo-backends/sdl2
        make -f Makefile.PSV -j

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for PSV
        path: |
          ./cpymo-backends/sdl2/eboot.bin

  build-psp:
    name: 'PSP'
    runs-on: ubuntu-latest
    container: haydenkow/pspdev:latest

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    
    #- name: Install PSPDEV
    #  run: |
    #    git clone https://github.com/pspdev/pspdev.git --depth 1
    #    cd pspdev
    #    sudo ./prepare-mac-os.sh
    #    export PSPDEV=/usr/local/pspdev
    #    sudo mkdir -p $PSPDEV
    #    sudo chown -R $USER: $PSPDEV
    #    export PATH=$PATH:$PSPDEV/bin
    #    ./build-all.sh

    - name: Build
      run: |
        cd ./cpymo-backends/sdl2
        make -f Makefile.PSP

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for PSP
        path: |
          ./cpymo-backends/sdl2/EBOOT.PBP

  build-wasm:
    name: 'Emscripten'
    runs-on: ubuntu-latest
    container: emscripten/emsdk:latest

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Build
      run: |
        cd cpymo-backends/sdl2
        make -f Makefile.Emscripten -j

  build-android:
    name: 'Android'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - run: chmod +x ./cpymo-backends/android/gradlew

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'microsoft'

    - name: Build APK
      uses: sparkfabrik/android-build-action@v1.0.0
      with:
        project-path: ./cpymo-backends/android
        output-path: cpymo.apk
        gradle-task: assembleRelease

    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      # ID used to access action output
      id: sign_app
      with:
        releaseDirectory: ./
        signingKeyBase64: ${{ secrets.ANDROID_SIGN_KEYSTORE }}
        alias: 'key0'
        keyStorePassword: '123456'
        keyPassword: '123456'
      env:
        # override default build-tools version (29.0.3) -- optional
        BUILD_TOOLS_VERSION: "30.0.2"


    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for Android
        path: |
          ./cpymo-signed.apk

  build-uwp:
    name: 'Universal Windows Platform'
    runs-on: 'windows-latest'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Find Visual Studio
      uses: ilammy/msvc-dev-cmd@v1
        
    - name: Set up NASM
      uses: ilammy/setup-nasm@v1.2.1
        
    - name: Donwload vcpkg
      run: git clone https://github.com/microsoft/vcpkg --depth 1

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.bat
        ./vcpkg/vcpkg integrate install

    - name: Install FFmpeg
      run: |
        ./vcpkg/vcpkg install ffmpeg:x86-uwp ffmpeg:x64-uwp ffmpeg:arm-uwp

    - name: Build
      run: |
        pushd cpymo-backends/uwp
        msbuild -m -p:UapAppxPackageBuildMode=SideLoadOnly -p:AppxBundlePlatforms="x86|x64|arm" -p:AppxPackageSigningEnabled=true -p:Configuration=Release -p:PackageCertificateKeyFile=CPyMO_TemporaryKey.pfx -p:PackageCertificatePassword=CPyMO CPyMO.vcxproj
        popd

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for Universal Windows Platform
        path: ./cpymo-backends/uwp/AppPackages/CPyMO/

  build-windows:
    name: 'Windows'
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [ 'x64', 'x86', 'ARM', 'ARM64' ]
        include:
        - arch: x64
          triplet: x64-windows-static
          vsdev-arch: x64
        - arch: x86
          triplet: x86-windows-static
          vsdev-arch: x86
        - arch: ARM
          triplet: arm-windows-static
          vsdev-arch: amd64_arm
        - arch: ARM64
          triplet: arm64-windows-static
          vsdev-arch: amd64_arm64

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        
    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ runner.os == 'Windows' }}
      with:
        arch: ${{ matrix.vsdev-arch }}

    - name: Donwload vcpkg
      run: git clone https://github.com/microsoft/vcpkg --depth 1

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.bat

    - name: Install SDL2
      run: ./vcpkg/vcpkg install SDL2:${{ matrix.triplet }}

    - name: Install FFMPEG
      run: ./vcpkg/vcpkg install ffmpeg:${{ matrix.triplet }}  

    - name: Build
      run: |
        cd cpymo-backends/sdl2
        nmake -f Makefile.Win32 -a NO_CONSOLE=1 -a SDL2=../../vcpkg/packages/sdl2_${{ matrix.triplet }} -a FFMPEG=../../vcpkg/packages/ffmpeg_${{ matrix.triplet }}

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      with:
        name: CPyMO for Windows (NMake) ${{ matrix.arch }}
        path: cpymo-backends/sdl2/cpymo.exe

  build-desktop:
    name: 'Desktop'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        tuple: [ win-x64, win-x86, win-arm64, win-arm, mac-x64, mac-arm64, linux-x64 ]

        include:
          - tuple: win-x64
            os: windows-latest
            triplet: x64-windows-static
            arch: x64
            package-name: "Windows x64"
            cmake-flags: "-A x64 -DCMAKE_GENERATOR_PLATFORM=x64"
          - tuple: win-x86
            os: windows-latest
            triplet: x86-windows-static
            arch: x86
            package-name: "Windows x86"
            cmake-flags: "-A Win32 -DCMAKE_GENERATOR_PLATFORM=Win32"
          - tuple: win-arm
            os: windows-latest
            triplet: arm-windows-static
            arch: amd64_arm
            package-name: "Windows ARM"
            cmake-flags: "-A arm -DCMAKE_GENERATOR_PLATFORM=arm"
          - tuple: win-arm64
            os: windows-latest
            triplet: arm64-windows-static
            arch: amd64_arm64
            package-name: "Windows ARM64"
            cmake-flags: "-A arm64 -DCMAKE_GENERATOR_PLATFORM=arm64"
          - tuple: linux-x64
            os: ubuntu-latest
            triplet: x64-linux
            package-name: "Linux x64"
          - tuple: mac-x64
            os: macos-latest
            triplet: x64-osx
            package-name: "macOS x64"
            cmake-flags: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          - tuple: mac-arm64
            os: macos-latest
            triplet: arm64-osx
            package-name: "macOS Apple Silicon"
            cmake-flags: "-DCMAKE_OSX_ARCHITECTURES=arm64"
            
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        
    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ runner.os == 'Windows' }}
      with:
        arch: ${{ matrix.arch }}
        
    - name: Set up NASM
      uses: ilammy/setup-nasm@v1.2.1
      if: ${{ runner.os != 'Windows' }}
        
    - name: Donwload vcpkg
      run: git clone https://github.com/microsoft/vcpkg --depth 1

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.sh
      if: ${{ runner.os != 'Windows' }}

    - name: Bootstrap vcpkg (Windows)
      run: ./vcpkg/bootstrap-vcpkg.bat
      if: ${{ runner.os == 'Windows' }}

    - name: Install SDL2
      run: ./vcpkg/vcpkg install SDL2:${{ matrix.triplet }}
      
    - name: Install X11 for Linux
      run: ./vcpkg/vcpkg install SDL2[x11]:${{ matrix.triplet }} --recurse
      if: ${{ runner.os == 'Linux' }}

    - name: Install FFMPEG
      run: ./vcpkg/vcpkg install ffmpeg:${{ matrix.triplet }}  

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake "-DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{ matrix.cmake-flags }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Strip
      if: ${{ runner.os != 'Windows' }}
      run: |
        strip ./build/build/cpymo
        strip ./build/build/cpymo-tool

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      if: ${{ runner.os != 'Windows' }}
      with:
        name: CPyMO for ${{ matrix.package-name }}
        path: |
            ./build/build/cpymo
            ./build/build/cpymo-tool
            ./build/build/MinSizeRel/cpymo.exe
            ./build/build/MinSizeRel/cpymo-tool.exe

    - name: Upload
      uses: actions/upload-artifact@v2.3.0
      if: ${{ runner.os == 'Windows' }}
      with:
        name: CPyMO for ${{ matrix.package-name }}
        path: |
            ./build/build/Release/cpymo.exe
            ./build/build/Release/cpymo-tool.exe
